// Camera set-up
camera([-512, 0, 384], [0, 33, 0], [1,1,1]);
resolution(960, 540);
resolution(320, 180);
antialiasing(0,2);

def	ground_block(r, h)
{
	translation([0,0,h / 2.0]); intersection();
		box(r, r*1.2, h, true);
		rotation([0,0,60]); box(r, r*1.2, h, true); end();
		rotation([0,0,120]); box(r, r*1.2, h, true); end();
	end(); end();
}

// Lights
//rotation([0, 70, 0]); rotation([0, 0, -20]); directional_light([255], 4.2); end(); end();
translation([0,0,50000]); point_light([255]); end();
occlusion_light([255], 32);

direct([255 * 0.4],[255 * 0.6],[255 * 0.2], 8.4);

// Ground
// translation([0,0,-1-8]); box(360,560,16, true); end();

// 3D Model
translation([-42,-252 * cos(30.0 / 180.0 * pi),0]); bounding();
	cylinder(42 / cos(30.0 / 180.0 * pi), 95);
	
	color([255,255,225]); ground_block(84-2,40); end();
	translation([-8,16,38]); rotation([0,0,-60]); scale([0.5]);
		mesh("../models/bunny.stl");
	end(); end(); end();
end(); end();

// Recursive Cube
translation([+42,-252 * cos(30.0 / 180.0 * pi),0]); bounding();
	cylinder(42 / cos(30.0 / 180.0 * pi), 136);
	
	color([255,255,225]); ground_block(84-2,64); end();
	translation([0,0,99+1]); scale([24]); rotation([0,0,45]);
		import("recucube.scn");
	end(); end(); end();
end(); end();

// Tangle
translation([-84,-168 * cos(30.0 / 180.0 * pi),0]); bounding();
	cylinder(42 / cos(30.0 / 180.0 * pi), 72);
	
	color([255,255,225]); ground_block(84-2,32); end();
	translation([0,0,52]); scale([8.4]);
		tangle(10);
	end(); end();
end(); end();

// Intersection
translation([0,-168 * cos(30.0 / 180.0 * pi),0]); bounding();
	cylinder(42 / cos(30.0 / 180.0 * pi), 102);
	
	color([255,255,225]); ground_block(84-2,56); end();
	translation([0,0,76+1]); rotation([0,0,-20]);
		intersection();
			box(40, true);
			sphere(25);
		end();
	end(); end();
end(); end();

// Towers
translation([+84,-168 * cos(30.0 / 180.0 * pi),0]); bounding();
	cylinder(42 / cos(30.0 / 180.0 * pi), 169);
	
	color([255,255,225]); ground_block(84-2,88); end();
	 reflection(0.36, 2.1); translation([0,0,88+1]);
		translation([16 * cos(30.0 / 180.0 * pi) * -2, 16 * -1.0, 0]); rotation([0,0,30]); ground_block(16-4,8); end(); end();
		translation([16 * cos(30.0 / 180.0 * pi) * -2, 16 * +0.0, 0]); rotation([0,0,30]); ground_block(16-4,4); end(); end();
		translation([16 * cos(30.0 / 180.0 * pi) * -2, 16 * +1.0, 0]); rotation([0,0,30]); ground_block(16-4,6); end(); end();
		
		translation([16 * cos(30.0 / 180.0 * pi) * -1, 16 * -1.5, 0]); rotation([0,0,30]); ground_block(16-4,10); end(); end();
		translation([16 * cos(30.0 / 180.0 * pi) * -1, 16 * -0.5, 0]); rotation([0,0,30]); ground_block(16-4,24); end(); end();
		translation([16 * cos(30.0 / 180.0 * pi) * -1, 16 * +0.5, 0]); rotation([0,0,30]); ground_block(16-4,20); end(); end();
		translation([16 * cos(30.0 / 180.0 * pi) * -1, 16 * +1.5, 0]); rotation([0,0,30]); ground_block(16-4,4); end(); end();
		
		translation([16 * cos(30.0 / 180.0 * pi) * +0, 16 * -2.0, 0]); rotation([0,0,30]); ground_block(16-4,8); end(); end();
		translation([16 * cos(30.0 / 180.0 * pi) * +0, 16 * -1.0, 0]); rotation([0,0,30]); ground_block(16-4,32); end(); end();
		translation([16 * cos(30.0 / 180.0 * pi) * +0, 16 * +0.0, 0]); rotation([0,0,30]); ground_block(16-4,80); end(); end();
		translation([16 * cos(30.0 / 180.0 * pi) * +0, 16 * +1.0, 0]); rotation([0,0,30]); ground_block(16-4,40); end(); end();
		translation([16 * cos(30.0 / 180.0 * pi) * +0, 16 * +2.0, 0]); rotation([0,0,30]); ground_block(16-4,12); end(); end();
		
		translation([16 * cos(30.0 / 180.0 * pi) * +1, 16 * -1.5, 0]); rotation([0,0,30]); ground_block(16-4,16); end(); end();
		translation([16 * cos(30.0 / 180.0 * pi) * +1, 16 * -0.5, 0]); rotation([0,0,30]); ground_block(16-4,24); end(); end();
		translation([16 * cos(30.0 / 180.0 * pi) * +1, 16 * +0.5, 0]); rotation([0,0,30]); ground_block(16-4,36); end(); end();
		translation([16 * cos(30.0 / 180.0 * pi) * +1, 16 * +1.5, 0]); rotation([0,0,30]); ground_block(16-4,12); end(); end();
		
		translation([16 * cos(30.0 / 180.0 * pi) * +2, 16 * -1.0, 0]); rotation([0,0,30]); ground_block(16-4,4); end(); end();
		translation([16 * cos(30.0 / 180.0 * pi) * +2, 16 * +0.0, 0]); rotation([0,0,30]); ground_block(16-4,10); end(); end();
		translation([16 * cos(30.0 / 180.0 * pi) * +2, 16 * +1.0, 0]); rotation([0,0,30]); ground_block(16-4,8); end(); end();
	end(); end();
end(); end();

// Torus
translation([-126,-84 * cos(30.0 / 180.0 * pi),0]); bounding();
	cylinder(42 / cos(30.0 / 180.0 * pi), 28 + sqrt(2) * 20);
	
	color([255,255,225]); ground_block(84-2,12); end();
	translation([0,0,12+1 + sqrt(2) / 2 * 20 + 8]); rotation([0,-45,60]);
		torus(20, 8);
	end(); end();
end(); end();

// Mirror
translation([-42,-84 * cos(30.0 / 180.0 * pi),0]); bounding();
	cylinder(42 / cos(30.0 / 180.0 * pi), 101);
	
	color([255,255,225]); ground_block(84-2,48); end();
	translation([0,0,74+1]);
		direct([255],[255],[255*5],8.4); reflection(0.84, 0); sphere(26); end(); end();
	end();
end(); end();

// Mirror glossy
translation([+42,-84 * cos(30.0 / 180.0 * pi),0]); bounding();
	cylinder(42 / cos(30.0 / 180.0 * pi), 133);
	
	color([255,255,225]); ground_block(84-2,80); end();
	translation([0,0,106+1]);
		reflection(0.84, 8.4); sphere(26); end();
	end();
end(); end();

translation([+126,-84 * cos(30.0 / 180.0 * pi),0]); ground_block(84-2,32); end();

// Box
translation([-84,0,0]); bounding();
	cylinder(42 / cos(30.0 / 180.0 * pi), 67);
	
	color([255,255,225]); ground_block(84-2,24); end();
	translation([0,0,24+1+21]); rotation([0,0,15]);
		box(42, true);
	end(); end();
end(); end();

// Difference
translation([0,0,0]); bounding();
	cylinder(42 / cos(30.0 / 180.0 * pi), 110);
	
	color([255,255,225]); ground_block(84-2,64); end();
	translation([0,0,84+1]); rotation([0,0,-20]);
		difference();
			box(40, true);
			sphere(25);
		end();
	end(); end();
end(); end();

// House
translation([+84,0,0]); bounding();
	cylinder(42 / cos(30.0 / 180.0 * pi), 512);
	
	color([255,255,225]); ground_block(84-2,96); end();
	translation([0,0,96+1]); rotation([0,0,-60]); scale([0.15]);
		import("house.scn");
	end(); end(); end();
end(); end();

// Cone
translation([-126,+84 * cos(30.0 / 180.0 * pi),0]); bounding();
	cylinder(42 / cos(30.0 / 180.0 * pi), 73);
	
	color([255,255,225]); ground_block(84-2,16); end();	
	translation([0,0,16+1]);
		cone(28,-28,56);
	end();
end(); end();

// Transparency
translation([-42,+84 * cos(30.0 / 180.0 * pi),0]); bounding();
	cylinder(42 / cos(30.0 / 180.0 * pi), 96);
	
	color([255,255,225]); ground_block(84-2,56); end();
	
	color([255]); intersection();
		translation([0,0,56-2]); ground_block(68,4); end();
		
		translation([-48,-48,56-1]);
			for(var x = 0; x < 8; ++x) {
				for(var y = 0; y < 8; ++y) {
					if ((x+y)%2==0) {
						translation([12*x, 12*y, 0]); box(12,12,2); end();
					}
				}
			}
		end();
	end(); end();
	color([42]); intersection();
		translation([0,0,56-2]); ground_block(68,4); end();
		
		translation([-48,-48,56-1]);
			for(var x = 0; x < 8; ++x) {
				for(var y = 0; y < 8; ++y) {
					if ((x+y)%2!=0) {
						translation([12*x, 12*y, 0]); box(12,12,2); end();
					}
				}
			}
		end();
	end(); end();
	
	translation([0,0,80+1]); scale([8.4]);
		transparency(0.92, 1.31); tangle(10); end();
	end(); end();
end(); end();

// Transparency glossy
translation([+42,+84 * cos(30.0 / 180.0 * pi),0]); bounding();
	cylinder(42 / cos(30.0 / 180.0 * pi), 196);
	
	color([255,255,225]); ground_block(84-2,72); end();
	
	color([255]); intersection();
		translation([0,0,72-2]); ground_block(68,4); end();
		
		translation([-48,-48,72-1]);
			for(var x = 0; x < 8; ++x) {
				for(var y = 0; y < 8; ++y) {
					if ((x+y)%2==0) {
						translation([12*x, 12*y, 0]); box(12,12,2); end();
					}
				}
			}
		end();
	end(); end();
	color([42]); intersection();
		translation([0,0,72-2]); ground_block(68,4); end();
		
		translation([-48,-48,72-1]);
			for(var x = 0; x < 8; ++x) {
				for(var y = 0; y < 8; ++y) {
					if ((x+y)%2!=0) {
						translation([12*x, 12*y, 0]); box(12,12,2); end();
					}
				}
			}
		end();
	end(); end();
	
	translation([0,0,92+1]); scale([8.4]);
		transparency(0.92, 1.31, 4.2); tangle(10); end();
	end(); end();
end(); end();

translation([+126,+84 * cos(30.0 / 180.0 * pi),0]); ground_block(84-2,32); end();

// Cylinder
translation([-84,+168 * cos(30.0 / 180.0 * pi),0]); bounding();
	cylinder(42 / cos(30.0 / 180.0 * pi), 89);
	
	color([255,255,225]); ground_block(84-2,32); end();
	translation([0,0,32+1]);
		cylinder(24,56);
	end();
end(); end();

// Union
translation([0,+168 * cos(30.0 / 180.0 * pi),0]); bounding();
	cylinder(42 / cos(30.0 / 180.0 * pi), 114);
	
	color([255,255,225]); ground_block(84-2,68); end();
	translation([0,0,88+1]); rotation([0,0,-20]);
		union();
			box(40, true);
			sphere(25);
		end();
	end(); end();
end(); end();

// Glass Towers
translation([+84,+168 * cos(30.0 / 180.0 * pi),0]); bounding();
	cylinder(42 / cos(30.0 / 180.0 * pi), 169);
	
	color([255,255,225]); ground_block(84-2,88); end();
	translation([0,0,88+1]); transparency(0.92, 1.35, 2.1);
		translation([16 * cos(30.0 / 180.0 * pi) * -2, 16 * -1.0, 0]); rotation([0,0,30]); ground_block(16-4,8); end(); end();
		translation([16 * cos(30.0 / 180.0 * pi) * -2, 16 * +0.0, 0]); rotation([0,0,30]); ground_block(16-4,8.5); end(); end();
		translation([16 * cos(30.0 / 180.0 * pi) * -2, 16 * +1.0, 0]); rotation([0,0,30]); ground_block(16-4,9); end(); end();
		
		translation([16 * cos(30.0 / 180.0 * pi) * -1, 16 * -1.5, 0]); rotation([0,0,30]); ground_block(16-4,26); end(); end();
		translation([16 * cos(30.0 / 180.0 * pi) * -1, 16 * -0.5, 0]); rotation([0,0,30]); ground_block(16-4,29); end(); end();
		translation([16 * cos(30.0 / 180.0 * pi) * -1, 16 * +0.5, 0]); rotation([0,0,30]); ground_block(16-4,33); end(); end();
		translation([16 * cos(30.0 / 180.0 * pi) * -1, 16 * +1.5, 0]); rotation([0,0,30]); ground_block(16-4,10); end(); end();
		
		translation([16 * cos(30.0 / 180.0 * pi) * +0, 16 * -2.0, 0]); rotation([0,0,30]); ground_block(16-4,23); end(); end();
		translation([16 * cos(30.0 / 180.0 * pi) * +0, 16 * -1.0, 0]); rotation([0,0,30]); ground_block(16-4,63); end(); end();
		translation([16 * cos(30.0 / 180.0 * pi) * +0, 16 * +0.0, 0]); rotation([0,0,30]); ground_block(16-4,80); end(); end();
		translation([16 * cos(30.0 / 180.0 * pi) * +0, 16 * +1.0, 0]); rotation([0,0,30]); ground_block(16-4,38); end(); end();
		translation([16 * cos(30.0 / 180.0 * pi) * +0, 16 * +2.0, 0]); rotation([0,0,30]); ground_block(16-4,11); end(); end();
		
		translation([16 * cos(30.0 / 180.0 * pi) * +1, 16 * -1.5, 0]); rotation([0,0,30]); ground_block(16-4,20.5); end(); end();
		translation([16 * cos(30.0 / 180.0 * pi) * +1, 16 * -0.5, 0]); rotation([0,0,30]); ground_block(16-4,54); end(); end();
		translation([16 * cos(30.0 / 180.0 * pi) * +1, 16 * +0.5, 0]); rotation([0,0,30]); ground_block(16-4,43); end(); end();
		translation([16 * cos(30.0 / 180.0 * pi) * +1, 16 * +1.5, 0]); rotation([0,0,30]); ground_block(16-4,12.5); end(); end();
		
		translation([16 * cos(30.0 / 180.0 * pi) * +2, 16 * -1.0, 0]); rotation([0,0,30]); ground_block(16-4,18); end(); end();
		translation([16 * cos(30.0 / 180.0 * pi) * +2, 16 * +0.0, 0]); rotation([0,0,30]); ground_block(16-4,16); end(); end();
		translation([16 * cos(30.0 / 180.0 * pi) * +2, 16 * +1.0, 0]); rotation([0,0,30]); ground_block(16-4,14); end(); end();
	end(); end();
end(); end();

// Sphere
translation([-42,+252 * cos(30.0 / 180.0 * pi),0]); bounding();
	cylinder(42 / cos(30.0 / 180.0 * pi), 93);
	
	color([255,255,225]); ground_block(84-2,40); end();
	translation([0,0,40+1+26]);
		sphere(26);
	end();
end(); end();

// Menger sponge
translation([+42,+252 * cos(30.0 / 180.0 * pi),0]); bounding();
	cylinder(42 / cos(30.0 / 180.0 * pi), 118);
	
	color([255,255,225]); ground_block(84-2,76); end();
	translation([0,0,97]); scale([40]); difference(); 
		box(1, true);
		maxdeph_light(0); import("menger.scn"); end();
	end(); end(); end();
end(); end();

end();
