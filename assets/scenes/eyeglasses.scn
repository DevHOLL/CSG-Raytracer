camera([-45, 45, 50], [0,37,-35], [1,1,1]);

var g_thickness = 1.0;
var g_radius = 10.0;
var g_space = 10.0;
var g_lenght = 45.0;
var g_ear = 8.0;

bounding();
translation([26,0,0]); box(56,55,22, true); end();

rotation([0,90,0]);

	direct([255],[255],[255], 1.5); color([255]); transparency(0.92, 1.36);
		translation([0, +(g_radius + g_space / 2), 0]);
			intersection();
				cylinder(g_radius - g_thickness / 4, g_thickness *2, true);
				translation([0,0,-(64 - g_thickness)]); sphere(64); end();
				translation([0,0,+(64 - g_thickness)]); sphere(64); end();
			end();
		end();
		translation([0, -(g_radius + g_space / 2), 0]);
			intersection();
				cylinder(g_radius - g_thickness / 4, g_thickness *2, true);
				translation([0,0,-(64 - g_thickness)]); sphere(64); end();
				translation([0,0,+(64 - g_thickness)]); sphere(64); end();
			end();
		end();
	end(); end(); end();

	color([64]);
	translation([0, -(g_radius + g_space / 2), 0]);
		difference();
			torus(g_radius, g_thickness);
			torus(g_radius - g_thickness, g_thickness/2);
		end();
	end();
	translation([0, +(g_radius + g_space / 2), 0]);
		difference();
			torus(g_radius, g_thickness);
			torus(g_radius - g_thickness, g_thickness/2);
		end();
	end();
	
	intersection();
		torus(g_space / 2, g_thickness);
		translation([-(g_space + g_thickness * 2) / 4,0,0]);
			box((g_space + g_thickness * 2) / 2, (g_space + g_thickness * 2), g_thickness * 2,true);
		end();
	end();
	translation([0,-g_space/2,0]); sphere(g_thickness); end();
	translation([0,+g_space/2,0]); sphere(g_thickness); end();
	
	translation([0,-(g_space / 2+ 2 * g_radius),0]);
		cylinder(g_thickness, g_lenght);
		sphere(g_thickness);
	end();
	translation([0,+(g_space / 2+ 2 * g_radius),0]);
		cylinder(g_thickness, g_lenght);
		sphere(g_thickness);
	end();
	
	rotation([90,0,0]);
		translation([g_ear,g_lenght,0]);
			translation([0,0,-(g_space / 2+ 2 * g_radius)]);
				intersection();
					torus(g_ear, g_thickness);
					translation([-(g_ear + g_thickness) / 2, +(g_ear + g_thickness) / 2, 0]); box(g_ear + g_thickness, g_ear + g_thickness, g_thickness * 2, true); end();
				end();
				translation([0,g_ear,0]); sphere(g_thickness); end();
			end();
			translation([0,0,+(g_space / 2+ 2 * g_radius)]);
				intersection();
					torus(g_ear, g_thickness);
					translation([-(g_ear + g_thickness) / 2, +(g_ear + g_thickness) / 2, 0]); box(g_ear + g_thickness, g_ear + g_thickness, g_thickness * 2, true); end();
				end();
				translation([0,g_ear,0]); sphere(g_thickness); end();
			end();
		end();
	end();
	
	end();
end();
end();