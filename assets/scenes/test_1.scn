// Camera set-up
camera([-570, 68, 470], [0, 39.8, -7.2], [1,1,1]);
resolution(960, 540);
antialiasing(0,2);
//virtual_reality(84, 4);
//camera([-1024, 0, 768], [0, 39.8, 0], [1,1,1]);
//deph_of_field(32, 700, 2);
//thread(4);

// Lights
rotation([0, 60, 30]); directional_light([255], 4.2); end();
occlusion_light([255], 32);

direct_light([255 * 0.4],[255 * 0.6],[255 * 0.2], 8.4);
indirect_light([0],[0],[0]);

// Socles
color([255,255,225]);
	translation([0,0,-70]); box(420,620,100,true); end();
	for (var x = 0; x < 4; ++x) {
		for (var y = 0; y < 6; ++y) {
			translation([-150 + 100 * x, -250 + 100 * y, -40 + 20 * x]); box(80, true); end();
		}
	}
end();

// Primitives
color([225.0]);
	translation([-150,+250,28+1]); sphere(28); end();
	translation([-150,+150,28+1]); cylinder(24,56, true); end();
	translation([-150,+50,28+1]); cone(32,-28,56, true); end();
	translation([-150,-50,22+1]); box(44, true); end();
	translation([-150,-150,23+1]); rotation([45,0,-45]) ; torus(22,8); end(); end();
	translation([-150,-250,19+1]); scale([10.0]); tangle(11.8); end(); end();
end();

// CSG
color([225.0]);
	translation([-50,+250,44+1]);
		union();
			box(48, true);
			sphere(30);
		end();
	end();
	translation([+50,+250,64+1]);
		difference();
			box(48, true);
			sphere(30);
		end();
	end();
	translation([+150,+250,84+1]);
		intersection();
			box(48, true);
			sphere(30);
		end();
	end();
end();

// Meshs
color([225.0]);
	translation([-50-25,+150+10,19+1]); scale([0.64]); rotation([0,0,-30]) ; mesh("../models/bunny.stl"); end(); end(); end();
	translation([+50-10,+150-10,40+1]); scale([0.32]); rotation([0,0,-50]) ; mesh("../models/mask.stl"); end(); end(); end();
	translation([+150+22,+150+86,60+1]); scale([1.4]); rotation([0,0,30]) ; mesh("../models/tardis.stl"); end(); end(); end();
end();

// Reflection
direct_light([255],[255],[255*5],8.4); translation([-50,+50,48+1]); reflection(0.84, 0); sphere(28); end(); end(); end();
direct_light([255],[255],[255*2],2.21); translation([+50,+50,68+1]); reflection(0.84, 7.2); sphere(28); end(); end(); end();
direct_light([255],[255],[255*1],1); translation([+150,+50,88+1]); reflection(0.84, 19.21); sphere(28); end(); end(); end();

// Transparence
def transparency_background()
{
	bounding();
		box(64,64,4, true);
		for (var x = 0; x < 4; ++x) {
			for (var y = 0; y < 4; ++y) {
				if ((x + y) % 2 != 0) {
					color([255]);
				}
				else {
					color([42]);
				}
				translation([-24+x*16,-24+y*16,0]); box(16,16,4, true); end();
				end();
			}
		}
	end();
}

translation([-50,-50,20]);
	transparency_background();
	transparency(0.92, 1.32, 0); direct_light([255],[255],[255*5],8.4);
		translation([0,0,32]); scale([10]); tangle(10); end(); end();
	end(); end();
end();
translation([+50,-50,40]);
	transparency_background();
	transparency(0.92, 1.32, 2.3); direct_light([255],[255],[255*2],2.21);
		translation([0,0,32]); scale([10]); tangle(10); end(); end();
	end(); end();
end();
translation([+150,-50,60]);
	transparency_background();
	transparency(0.92, 1.32, 5.2); direct_light([255],[255],[255],1);
		translation([0,0,32]); scale([10]); tangle(10); end(); end();
	end(); end();
end();

// Others
translation([-50,-150,42+1]); scale([4]); rotation([-45,0,-15]); import("dice.scn"); end(); end(); end();
translation([-80,-280,20+1]); scale([0.56]); rotation([-45,0,-45]); import("pencil.scn"); end(); end(); end();
translation([-70,-235,30+1]); scale([1]); rotation([0,4,-40]); import("eyeglasses.scn"); end(); end(); end();
translation([+50,-150,+40+1]); scale([25]); rotation([0,0,45]); translation([0,0,1.5]); import("recucube.scn"); end(); end(); end(); end();

translation([+50,-250,40+1]);
transparency(0.72,1.21,6.3,2);
	translation([+20,0,0]); color([255,155,155]); mesh();
		triangle([-2,+30,0],[+2,+30,0],[-2,-30,0]);
		triangle([+2,-30,0],[-2,-30,0],[+2,+30,0]);
		triangle([-2,+30,0],[+2,+30,40],[+2,+30,0]);
		triangle([-2,+30,0],[-2,+30,40],[+2,+30,40]);
		triangle([-2,-30,0],[+2,-30,0],[+2,-30,20]);
		triangle([-2,-30,0],[+2,-30,20],[-2,-30,20]);
		
		var x = 0;
		while (x < 30) {
			var m = cos((x + 0.0) / 30.0 * pi) * 10;
			var n = cos((x + 1.0) / 30.0 * pi) * 10;
			
			triangle([+2,+30-2*x,30+m],[-2,+30-2*x,30+m],[-2,+30-2*(x+1),30+n]);
			triangle([+2,+30-2*x,30+m],[-2,+30-2*(x+1),30+n],[+2,+30-2*(x+1),30+n]);
			triangle([-2,+30-2*x,0],[-2,+30-2*(x+1),0],[-2,+30-2*x,30+m]);
			triangle([-2,+30-2*(x+1),30+n],[-2,+30-2*x,30+m],[-2,+30-2*(x+1),0]);
			triangle([+2,+30-2*(x+1),0],[+2,+30-2*x,0],[+2,+30-2*x,30+m]);
			triangle([+2,+30-2*x,30+m],[+2,+30-2*(x+1),30+n],[+2,+30-2*(x+1),0]);
			
			x += 1;
		}
	end(); end(); end();
	translation([0,0,0]); color([155,255,155]); mesh();
		triangle([-2,+30,0],[+2,+30,0],[-2,-30,0]);
		triangle([+2,-30,0],[-2,-30,0],[+2,+30,0]);
		triangle([-2,+30,0],[+2,+30,30],[+2,+30,0]);
		triangle([-2,+30,0],[-2,+30,30],[+2,+30,30]);
		triangle([-2,-30,0],[+2,-30,0],[+2,-30,30]);
		triangle([-2,-30,0],[+2,-30,30],[-2,-30,30]);
		
		var y = 0;
		while (y < 30) {
			var m = sin((y + 0.0) / 30.0 * pi) * 10;
			var n = sin((y + 1.0) / 30.0 * pi) * 10;
			
			triangle([+2,+30-2*y,30+m],[-2,+30-2*y,30+m],[-2,+30-2*(y+1),30+n]);
			triangle([+2,+30-2*y,30+m],[-2,+30-2*(y+1),30+n],[+2,+30-2*(y+1),30+n]);
			triangle([-2,+30-2*y,0],[-2,+30-2*(y+1),0],[-2,+30-2*y,30+m]);
			triangle([-2,+30-2*(y+1),30+n],[-2,+30-2*y,30+m],[-2,+30-2*(y+1),0]);
			triangle([+2,+30-2*(y+1),0],[+2,+30-2*y,0],[+2,+30-2*y,30+m]);
			triangle([+2,+30-2*y,30+m],[+2,+30-2*(y+1),30+n],[+2,+30-2*(y+1),0]);
			
			y += 1;
		}
	end(); end(); end();
	translation([-20,0,0]); color([155,155,255]); mesh();
		triangle([-2,+30,0],[+2,+30,0],[-2,-30,0]);
		triangle([+2,-30,0],[-2,-30,0],[+2,+30,0]);
		triangle([-2,+30,0],[+2,+30,20],[+2,+30,0]);
		triangle([-2,+30,0],[-2,+30,20],[+2,+30,20]);
		triangle([-2,-30,0],[+2,-30,0],[+2,-30,40]);
		triangle([-2,-30,0],[+2,-30,40],[-2,-30,40]);
		
		var z = 0;
		while (z < 30) {
			var m = cos((z + 0.0) / 30.0 * pi) * -10;
			var n = cos((z + 1.0) / 30.0 * pi) * -10;
			
			triangle([+2,+30-2*z,30+m],[-2,+30-2*z,30+m],[-2,+30-2*(z+1),30+n]);
			triangle([+2,+30-2*z,30+m],[-2,+30-2*(z+1),30+n],[+2,+30-2*(z+1),30+n]);
			triangle([-2,+30-2*z,0],[-2,+30-2*(z+1),0],[-2,+30-2*z,30+m]);
			triangle([-2,+30-2*(z+1),30+n],[-2,+30-2*z,30+m],[-2,+30-2*(z+1),0]);
			triangle([+2,+30-2*(z+1),0],[+2,+30-2*z,0],[+2,+30-2*z,30+m]);
			triangle([+2,+30-2*z,30+m],[+2,+30-2*(z+1),30+n],[+2,+30-2*(z+1),0]);
			
			z += 1;
		}
	end(); end(); end();
end();
end();

translation([+150,-150,+60+1]); scale([1.1]); reflection(0.18, 2.1);
	bounding();
		translation([0,0,30]); box(67,67,60, true); end();
		
		translation([-2.0*80.0/6.0-5,-2.0*80.0/6.0-5,0]); box(10, 10, 5 + 2 * 5); end();
		translation([-1.0*80.0/6.0-5,-2.0*80.0/6.0-5,0]); box(10, 10, 5 + 3 * 5); end();
		translation([+0.0*80.0/6.0-5,-2.0*80.0/6.0-5,0]); box(10, 10, 5 + 1 * 5); end();
		translation([+1.0*80.0/6.0-5,-2.0*80.0/6.0-5,0]); box(10, 10, 5 + 3 * 5); end();
		translation([+2.0*80.0/6.0-5,-2.0*80.0/6.0-5,0]); box(10, 10, 5 + 6 * 5); end();
		
		translation([-2.0*80.0/6.0-5,-1.0*80.0/6.0-5,0]); box(10, 10, 5 + 0 * 5); end();
		translation([-1.0*80.0/6.0-5,-1.0*80.0/6.0-5,0]); box(10, 10, 5 + 2 * 5); end();
		translation([+0.0*80.0/6.0-5,-1.0*80.0/6.0-5,0]); box(10, 10, 5 + 6 * 5); end();
		translation([+1.0*80.0/6.0-5,-1.0*80.0/6.0-5,0]); box(10, 10, 5 + 3 * 5); end();
		translation([+2.0*80.0/6.0-5,-1.0*80.0/6.0-5,0]); box(10, 10, 5 + 3 * 5); end();
		
		translation([-2.0*80.0/6.0-5,+0.0*80.0/6.0-5,0]); box(10, 10, 5 + 1 * 5); end();
		translation([-1.0*80.0/6.0-5,+0.0*80.0/6.0-5,0]); box(10, 10, 5 + 4 * 5); end();
		translation([+0.0*80.0/6.0-5,+0.0*80.0/6.0-5,0]); box(10, 10, 5 + 12 * 5); end();
		translation([+1.0*80.0/6.0-5,+0.0*80.0/6.0-5,0]); box(10, 10, 5 + 4 * 5); end();
		translation([+2.0*80.0/6.0-5,+0.0*80.0/6.0-5,0]); box(10, 10, 5 + 2 * 5); end();
		
		translation([-2.0*80.0/6.0-5,+1.0*80.0/6.0-5,0]); box(10, 10, 5 + 2 * 5); end();
		translation([-1.0*80.0/6.0-5,+1.0*80.0/6.0-5,0]); box(10, 10, 5 + 1 * 5); end();
		translation([+0.0*80.0/6.0-5,+1.0*80.0/6.0-5,0]); box(10, 10, 5 + 5 * 5); end();
		translation([+1.0*80.0/6.0-5,+1.0*80.0/6.0-5,0]); box(10, 10, 5 + 3 * 5); end();
		translation([+2.0*80.0/6.0-5,+1.0*80.0/6.0-5,0]); box(10, 10, 5 + 2 * 5); end();
		
		translation([-2.0*80.0/6.0-5,+2.0*80.0/6.0-5,0]); box(10, 10, 5 + 1 * 5); end();
		translation([-1.0*80.0/6.0-5,+2.0*80.0/6.0-5,0]); box(10, 10, 5 + 0 * 5); end();
		translation([+0.0*80.0/6.0-5,+2.0*80.0/6.0-5,0]); box(10, 10, 5 + 1 * 5); end();
		translation([+1.0*80.0/6.0-5,+2.0*80.0/6.0-5,0]); box(10, 10, 5 + 1 * 5); end();
		translation([+2.0*80.0/6.0-5,+2.0*80.0/6.0-5,0]); box(10, 10, 5 + 0 * 5); end();
	end();
end(); end(); end();

color([225.0]); translation([+150,-250,+60]);
	color([255, 105, 105]); translation([0, +20, 26+1]); box(52,12,52, true); end(); end();
	color([105, 255, 105]); translation([0, 0, 26+1]); box(52,12,52, true); end(); end();
	color([105, 105, 255]); translation([0, -20, 26+1]); box(52,12,52, true); end(); end();
end(); end();

end();
end();
