// Camera set-up
translation([-570, 68, 470]); rotation([0, 39.8, -7.2]); camera(); end(); end();
resolution(640, 360);
antialiasing(0,2);
//anaglyph_3d(64, 680);
//thread(4);

// Lights
rotation([0, 60, 30]); directional_light([255], 4.2); end();
occlusion_light([255], 32);

light([255 * 0.4],[255 * 0.6],[255 * 0.2], 8.4);

 // Socles
color([255,255,225]);
	translation([0,0,-70]); box(420,620,100,true); end();
	for (var x = 0; x < 4; ++x) {
		for (var y = 0; y < 6; ++y) {
			translation([-150 + 100 * x, -250 + 100 * y, -40 + 20 * x]); box(80, true); end();
		}
	}
end();

// Primitives
color([225.0]);
	translation([-150,+250,28+1]); sphere(28); end();
	translation([-150,+150,28+1]); cylinder(24,56, true); end();
	translation([-150,+50,28+1]); cone(32,-28,56, true); end();
	translation([-150,-50,22+1]); box(44, true); end();
	translation([-150,-150,23+1]); rotation([45,0,-45]) ; torus(22,8); end(); end();
	translation([-150,-250,19+1]); scale([10.0]); tangle(11.8); end(); end();
end();

// CSG
color([225.0]);
	translation([-50,+250,44+1]);
		union();
			box(48, true);
			sphere(30);
		end();
	end();
	translation([+50,+250,64+1]);
		difference();
			box(48, true);
			sphere(30);
		end();
	end();
	translation([+150,+250,84+1]);
		intersection();
			box(48, true);
			sphere(30);
		end();
	end();
end();

// Objets composÃ©s
color([225.0]); translation([-75,+150,19+1]); scale([0.64]); rotation([0,0,-30]) ; mesh("../models/bunny.stl"); end(); end(); end(); end();
translation([+20,+120,40+1]); scale([0.56]); rotation([-45,0,-45]); import("pencil.scn"); end(); end(); end();
translation([+30,+165,50+1]); scale([1]); rotation([0,4,-40]); import("eyeglasses.scn"); end(); end(); end();
translation([+150,+150,82+1]); scale([4]); rotation([-45,0,-15]); import("dice.scn"); end(); end(); end();

// Reflection
light([255],[255],[255],8.4);
	translation([-50,+50,48+1]); reflection(0.84, 0); sphere(28); end(); end();
	translation([+50,+50,68+1]); reflection(0.84, 0.04); sphere(28); end(); end();
	translation([+150,+50,88+1]); reflection(0.84, 0.21); sphere(28); end(); end();
end();

// Transparence
def transparency_background()
{
	bounding();
		box(64,64,4, true);
		for (var x = 0; x < 4; ++x) {
			for (var y = 0; y < 4; ++y) {
				if ((x + y) % 2 != 0) {
					color([255]);
				}
				else {
					color([42]);
				}
				translation([-24+x*16,-24+y*16,0]); box(16,16,4, true); end();
				end();
			}
		}
	end();
	
	bounding();
		translation([32,0,32]); box(4,64,64, true); end();
		for (var x = 0; x < 4; ++x) {
			for (var y = 0; y < 4; ++y) {
				if ((x + y) % 2 != 0) {
					color([255]);
				}
				else {
					color([42]);
				}
				translation([32,-24+y*16,32-24+x*16]); box(4,16,16, true); end();
				end();
			}
		}
	end();
}

translation([-50,-50,20]);
	transparency_background();
	transparency(0.92, 1.1, 0);
		translation([0,0,32]); scale([10]); tangle(11.8); end(); end();
	end();
end();
translation([+50,-50,40]);
	transparency_background();
	transparency(0.92, 1.1, 0.04);
		translation([0,0,32]); scale([10]); tangle(11.8); end(); end();
	end();
end();
translation([+150,-50,60]);
	transparency_background();
	transparency(0.92, 1.1, 0.21);
		translation([0,0,32]); scale([10]); tangle(11.8); end(); end();
	end();
end();

// Others
color([225.0]); translation([-50,-150,+20]);
	color([255, 105, 105]); translation([0, +20, 26+1]); box(52,12,52, true); end(); end();
	color([105, 255, 105]); translation([0, 0, 26+1]); box(52,12,52, true); end(); end();
	color([105, 105, 255]); translation([0, -20, 26+1]); box(52,12,52, true); end(); end();
end(); end();

end();
