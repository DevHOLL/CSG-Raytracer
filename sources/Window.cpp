#include <SFML/Graphics/Texture.hpp>
#include <SFML/Graphics/Sprite.hpp>

#include "Window.hpp"
#include "Exception.hpp"

RT::Window::Window()
  : _window(sf::VideoMode(RT::Config::Window::Width, RT::Config::Window::Height), std::string(RT::Config::Window::Title), sf::Style::Titlebar | sf::Style::Resize | sf::Style::Close), _focus(true)
{
  // Activate V-sync (limit fps)
  _window.setVerticalSyncEnabled(true);

  // Disabled key repeate
  _window.setKeyRepeatEnabled(false);

  // Define icon here
  uint32_t	icon[] =
  { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x201f23, 0x0, 0x0, 0x0, 0x1bffffff, 0x0, 0x0, 0x0, 0x0, 0x201f23, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x201f23, 0x0, 0x4201f23, 0x60201f23, 0xa9201f23, 0xe0201f23, 0xff201f23, 0xff919092, 0xff3b3a3e, 0xf5201f23, 0xcd201f23, 0x8e201f23, 0x3c201f23, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x201f23, 0x0, 0x19201f23, 0xa8201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff131216, 0xffeaeaea, 0xff9a999b, 0xff1f1e22, 0xff201f23, 0xff201f23, 0xff201f23, 0xf1201f23, 0x71201f23, 0x0, 0x201f23, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x201f23, 0x0, 0x8b201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff575659, 0xffffffff, 0xffffffff, 0xff1c1b1f, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xef201f23, 0x39201f23, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x201f23, 0xa201f23, 0xda201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff141317, 0xffdbdbdc, 0xffffffff, 0xffffffff, 0xff929193, 0xff1e1d21, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0x7e201f23, 0x0, 0x201f23, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x201f23, 0xe201f23, 0xf0201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff6c6b6d, 0xffffffff, 0xffe1ddfd, 0xffffffff, 0xffffffff, 0xff2e2c30, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0x98201f23, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x201f23, 0x0, 0xe7201f23, 0xfe201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff242327, 0xfffefefe, 0xffffffff, 0xff7f7ef5, 0xffd6d2fc, 0xffffffff, 0xffd2d2d3, 0xff151418, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0x7c201f23, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0xaf201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff161519, 0xffd0d0d1, 0xffffffff, 0xffffffff, 0xff2820ee, 0xff665ff3, 0xffffffff, 0xffffffff, 0xff8c8c8e, 0xff1c1b1f, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0x36201f23, 0x201f23, 0x0, 0x0,
    0x0, 0x201f23, 0x42201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff18171c, 0xff9f9e9f, 0xffffffff, 0xffffffff, 0xff928df7, 0xff231bee, 0xff1a13ed, 0xffd9d6fc, 0xffffffff, 0xffffffff, 0xff58575a, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xec201f23, 0x0, 0x0, 0x0,
    0x0, 0x0, 0xe0201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff1f1e22, 0xff727173, 0xffffffff, 0xffffffff, 0xffe6e4fd, 0xff1c15ee, 0xff251dee, 0xff251dee, 0xff3730ef, 0xffffffff, 0xffffffff, 0xffffffff, 0xff38373b, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0x6b201f23, 0x0, 0x0,
    0x201f23, 0x3f201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff27262a, 0xffffffff, 0xffffffff, 0xfffffeff, 0xff332def, 0xff261dee, 0xff251dee, 0xff251dee, 0xff251cee, 0xff6660f3, 0xffffffff, 0xffffffff, 0xffddddde, 0xff151418, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xeb201f23, 0x0, 0x0,
    0x0, 0xa8201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff1f1e22, 0xff939395, 0xffffffff, 0xffffffff, 0xff544ef2, 0xff261dee, 0xff251dee, 0xff251dee, 0xff251dee, 0xff251dee, 0xff1f18ee, 0xff9c98f7, 0xffffffff, 0xffffffff, 0xff505052, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0x33201f23, 0x201f23,
    0x0, 0xf9201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff141318, 0xffdfdfe0, 0xffffffff, 0xffcecbfb, 0xff1b14ed, 0xff251dee, 0xff251dee, 0xff251dee, 0xff251dee, 0xff251dee, 0xff251dee, 0xff1f18ee, 0xffffffff, 0xffffffff, 0xff99989a, 0xff1f1e22, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0x86201f23, 0x0,
    0x16201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff121116, 0xffffffff, 0xffffffff, 0xff8c87f6, 0xff251dee, 0xff251dee, 0xff251dee, 0xff251dee, 0xff251dee, 0xff251dee, 0xff251dee, 0xff1c15ed, 0xffd1cdfb, 0xffffffff, 0xffb9b9ba, 0xff1b1a1e, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xc2201f23, 0x0,
    0x36201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff131116, 0xffffffff, 0xffffffff, 0xff827df6, 0xff251dee, 0xff251dee, 0xff251dee, 0xff251dee, 0xff251dee, 0xff251dee, 0xff251dee, 0xff1e17ee, 0xffc9c5fb, 0xffffffff, 0xffb7b7b8, 0xff1c1b1f, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xeb201f23, 0x0,
    0x38201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff151418, 0xffdfdedf, 0xffffffff, 0xffaeabf9, 0xff221aee, 0xff251dee, 0xff251dee, 0xff251dee, 0xff251dee, 0xff251dee, 0xff251dee, 0xff160fed, 0xfff8f5fe, 0xffffffff, 0xff949495, 0xff1f1e22, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0x0,
    0x38201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff1f1e22, 0xff949396, 0xffffffff, 0xffffffff, 0xff251eee, 0xff251dee, 0xff251dee, 0xff251dee, 0xff251dee, 0xff251dee, 0xff261dee, 0xff635ef4, 0xffffffff, 0xffffffff, 0xff49484c, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0x0,
    0x38201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff2a292d, 0xffffffff, 0xffffffff, 0xffcfccfb, 0xff1b14ed, 0xff261dee, 0xff251dee, 0xff251dee, 0xff251cee, 0xff322cef, 0xfffaf9fe, 0xffffffff, 0xffd9d8d9, 0xff151418, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xf4201f23, 0x0,
    0x25201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff1e1d21, 0xff7e7d80, 0xffffffff, 0xffffffff, 0xffe7e5fd, 0xff6c65f3, 0xff3730f0, 0xff413af0, 0xff8984f6, 0xffffffff, 0xffffffff, 0xffffffff, 0xff37363a, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xd1201f23, 0x0,
    0x0, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff18171b, 0xff959597, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xff4d4c50, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0x9b201f23, 0x0,
    0x0, 0xc4201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff1a191d, 0xff555457, 0xffd9d9d9, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffb4b4b5, 0xff2c2b2e, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0x50201f23, 0x201f23,
    0x0, 0x64201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff151419, 0xff27262a, 0xff4b4a4d, 0xff434245, 0xff19191d, 0xff1b1a1e, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0x0, 0x0,
    0x0, 0x0, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0x97201f23, 0x0, 0x0,
    0x0, 0x0, 0x79201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xc201f23, 0x201f23, 0x0,
    0x0, 0x0, 0x0, 0xe6201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0x75201f23, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x201f23, 0x21201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xc8201f23, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x42201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xe3201f23, 0x1201f23, 0x201f23, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x42201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xd6201f23, 0x4201f23, 0x201f23, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e201f23, 0xe3201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0x98201f23, 0x0, 0x201f23, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x201f23, 0x0, 0x72201f23, 0xfb201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xce201f23, 0x2e201f23, 0x0, 0x201f23, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5b201f23, 0xbb201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xff201f23, 0xea201f23, 0x97201f23, 0x2c201f23, 0x0, 0x201f23, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x201f23, 0x0, 0x0, 0x1b201f23, 0x3e201f23, 0x4d201f23, 0x4a201f23, 0x31201f23, 0x8201f23, 0x0, 0x0, 0x201f23, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
  };

  // Set window icon
  _window.setIcon((unsigned int)std::sqrt(sizeof(icon) / sizeof(*icon)), (unsigned int)std::sqrt(sizeof(icon) / sizeof(*icon)), (const sf::Uint8 *)icon);
  
#ifdef _WIN32
  CoInitialize(nullptr);
  CoCreateInstance(CLSID_TaskbarList, nullptr, CLSCTX_INPROC_SERVER, IID_ITaskbarList3, (void **)&_taskbar);
  if (_taskbar == nullptr)
    throw RT::Exception(std::string(__FILE__) + ": l." + std::to_string(__LINE__));
#endif
}

RT::Window::~Window()
{}

RT::Window &			RT::Window::Instance()
{
  static RT::Window singleton;

  // Return unique instance (singleton)
  return singleton;
}

sf::RenderWindow &		RT::Window::window()
{
  return _window;
}

bool				RT::Window::update()
{
  sf::Event event;

  // Clear pressed/released key maps
  _pressed.clear();
  _released.clear();

  // Reset mouse wheel ticks
  _mouse.wheel = 0;

  while (_window.pollEvent(event))
  {
    // Stop if window closed
    if (event.type == sf::Event::Closed)
      return true;

    // Show/hide cursor if gained/lost focus
    if (event.type == sf::Event::GainedFocus)
      _focus = true;
    if (event.type == sf::Event::LostFocus)
      _focus = false;

    // Set pressed/released key
    if (event.type == sf::Event::KeyPressed)
      _pressed[event.key.code] = true;
    if (event.type == sf::Event::KeyReleased)
      _released[event.key.code] = true;

    // Get mouse wheel movement
    if (event.type == sf::Event::MouseWheelMoved)
      _mouse.wheel += event.mouseWheel.delta;
  }

  // Update mouse position/buttons
  _mouse.rx = sf::Mouse::getPosition(_window).x - _mouse.x;
  _mouse.x = sf::Mouse::getPosition(_window).x;
  _mouse.ry = sf::Mouse::getPosition(_window).y - _mouse.y;
  _mouse.y = sf::Mouse::getPosition(_window).y;
  if (_focus)
  {
    _mouse.left = sf::Mouse::isButtonPressed(sf::Mouse::Button::Left);
    _mouse.right = sf::Mouse::isButtonPressed(sf::Mouse::Button::Right);
    _mouse.middle = sf::Mouse::isButtonPressed(sf::Mouse::Button::Middle);
  }
  else
  {
    _mouse.wheel = 0;
    _mouse.left = false;
    _mouse.right = false;
    _mouse.middle = false;
  }

  return false;
}

void				RT::Window::display()
{
  _window.display();
}

void				RT::Window::draw(sf::Image const & image)
{
  sf::Texture	texture;
  sf::Sprite	sprite;
  float		scale, scale_x, scale_y;
  float		pos_x, pos_y;

  texture.loadFromImage(image);
  sprite.setTexture(texture);

  scale_x = (float)RT::Config::Window::Width / (float)_window.getSize().x;
  scale_y = (float)RT::Config::Window::Height / (float)_window.getSize().y;

  sprite.scale(sf::Vector2f(scale_x, scale_y));

  scale_x = (float)_window.getSize().x / (float)image.getSize().x;
  scale_y = (float)_window.getSize().y / (float)image.getSize().y;

  scale = scale_x < scale_y ? scale_x : scale_y;
  if (scale > 1.f)
    scale = 1.f;

  sprite.scale(sf::Vector2f(scale, scale));
  
  pos_x = (((float)_window.getSize().x - ((float)image.getSize().x * scale)) / ((float)_window.getSize().x * 2.f)) * RT::Config::Window::Width;
  pos_y = (((float)_window.getSize().y - ((float)image.getSize().y * scale)) / ((float)_window.getSize().y * 2.f)) * RT::Config::Window::Height;

  sprite.setPosition(sf::Vector2f(pos_x, pos_y));

  _window.draw(sprite);
}

void				RT::Window::setTaskbar(RT::Window::WindowFlag flag)
{
#ifdef _WIN32
  _taskbar->SetProgressState(_window.getSystemHandle(), (TBPFLAG)flag);
#endif
}

void				RT::Window::setTaskbar(RT::Window::WindowFlag flag, double progress)
{
  // Apply flag
  setTaskbar(flag);

  // Check for progress value
  if (progress < 0.f)
    progress = 0.f;
  if (progress > 1.f)
    progress = 1.f;

#ifdef _WIN32
  _taskbar->SetProgressValue(_window.getSystemHandle(), (ULONGLONG)(progress * 1000), 1000);
#endif
}

RT::Window::Mouse const &	RT::Window::mouse() const
{
  return _mouse;
}

bool	RT::Window::focus() const
{
  return _focus;
}

bool				RT::Window::key(sf::Keyboard::Key key) const
{
  // Check key status only if window has focus
  if (focus())
    return sf::Keyboard::isKeyPressed(key);
  else
    return false;
}

bool				RT::Window::keyPressed(sf::Keyboard::Key key) const
{
  // Check key status only if window has focus
  if (focus() && _pressed.find(key) != _pressed.end())
    return true;
  else
    return false;
}

bool				RT::Window::keyReleased(sf::Keyboard::Key key) const
{
  // Check key status only if window has focus
  if (focus() && _released.find(key) != _released.end())
    return true;
  else
    return false;
}
